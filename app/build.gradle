apply plugin: 'com.android.application'
def baseGradleScript = file("../base.gradle")
if (baseGradleScript.exists()) {
    apply from: baseGradleScript
} else {
    println "exception: not found  base.gradle "
    return
}
android {
    defaultConfig {
        applicationId "com.example.keydemo"
        versionCode computeVersionCode()
        versionName computeVersionName()
        buildConfigField "String", "GIT_REVISION", "\"${getGitVersion()}\""
        resValue 'string', 'app_name', 'Demo'
    }
    lintOptions {//（手动添加）
        abortOnError false//程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉
        disable 'MissingTranslation'
    }
    signingConfigs {//(手动添加)
        release {//设置打正式包签名属性
            storeFile file("/Users/demo.KeyStore")
            storePassword "demokey"
            keyAlias "demokey"
            keyPassword "demokey"
        }
    }
    buildTypes {
        release {
            minifyEnabled false // 替代的方式//是否执行代码混淆
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release//打正式包时运行签名文件 手动添加)
        }
    }
    initProductFlavors()
    productFlavors.all { flavor ->
        if ("aaaBuildForTest".equals(flavor.name)) {
            //第三方key
            flavor.buildConfigField "String", "CHANNEL", '\"aaaBuildForTest\"'
            flavor.resValue 'string', 'app_name', 'Demo_测试 ';
        } else {

        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name.equals('release')) {
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = "DEMO_${variant.productFlavors[0].name}_v${android.defaultConfig.versionName}_${getGitVersion()}.apk"
                    def outDir = new File(rootProject.projectDir.parentFile, "${releaseTime()}")
                    output.outputFile = new File(outDir, fileName)
                }
            }

        }
    }
}

def initProductFlavors() {
    def sourceFile = new File(rootProject.projectDir, '../source.txt')
    if (sourceFile.exists()) {
        println '>>> source file is exist'
        sourceFile.eachLine { line ->
            if (line.startsWith('source') || line.size() == 0) {
                return
            }
            def source = line.trim().toString();
            android.productFlavors.create(source)
        }
    } else {
        android.productFlavors.create('aaaBuildForTest')
        println '>>> source file is not exist'
    }

}

def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+8"))
}

def computeVersionName() {
    return "2.5"
}

def computeVersionCode() {
    def process = "git rev-list --branches --count".execute()
    return process.text.toInteger()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}
